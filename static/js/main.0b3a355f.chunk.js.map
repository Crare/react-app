{"version":3,"sources":["components/common/Header.js","actions/types.js","dto/Participant.js","resources/CommonFinnishNames.js","resources/EmailDomains.js","services/Utils.js","services/Validator.js","actions/ParticipantActions.js","services/ParticipantService.js","components/ParticipantList.js","components/ParticipantForm.js","components/ViewComponent.js","reducers/ParticipantReducer.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","text","React","Component","ActionTypes","Participant","id","name","email","phone","CommonFinnishNames","firstnames","lastnames","emailDomains","Utils","lastId","participants","storedFilter","filter","length","generateParticipants","filterParticipants","sortByColumn","sortAscending","sort","a","b","attr","compare","compareOpposite","amount","Error","i","generateId","generateName","generateEmail","generatePhone","participant","push","Math","floor","random","toLowerCase","replace","RegExp","toUpperCase","substring","indexOf","upperCaseName","participantId","index","findIndex","p","splice","error","map","Validator","fields","errors","forEach","field","validation","validate","value","type","InputValidationType","NAME","validateName","EMAIL","validateEmail","PHONE","validatePhone","key","ERROR","UNHANDLED_ERROR","match","success","INVALID_NAME","INVALID_EMAIL","toString","split","join","INVALID_PHONE","participantService","utils","validator","callback","getParticipants","trim","validationError","getFormFields","validateFields","addNewParticipant","deleteParticipant","updateParticipant","ParticipantList","state","fetchParticipants","prevProps","editParticipant","setState","sortBy","addHeaderSortStyling","onClick","renderSortIcon","dataValue","ArrowUpward","ArrowDownward","property","newValue","inputType","placeholder","onChange","handleInputChange","target","participantEmptyErrors","console","cancelEdit","Edit","editRow","Delete","renderItemContent","renderRowOptions","renderHeader","renderItems","loading","renderList","connect","participantReducer","dispatch","response","payload","setTimeout","ParticipantForm","addParticipant","bind","event","preventDefault","form","prop","participantFormUpdate","onSubmit","ViewComponent","renderErrors","INITIAL_STATE","combineReducers","action","App","store","createStore","reducers","applyMiddleware","ReduxThunk","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b3a355f.chunk.js","sourcesContent":["import React from 'react';\n\nimport \"../../styles/styles.scss\";\n\n/**\n * props: text\n * @param text is render inside header title.\n */\nexport default class Header extends React.Component {\n\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"logo\"></div>\n        <h1>{this.props.text}</h1>\n      </div>\n    );\n  }\n}","export const ActionTypes = {\n\n  PARTICIPANT_FORM_UPDATE: \"PARTICIPANT_FORM_UPDATE\",\n\n  PARTICIPANTS_FETCHING: \"PARTICIPANTS_FETCHING\",\n  PARTICIPANTS_FETCH_SUCCESS: \"PARTICIPANTS_FETCH_SUCCESS\",\n  PARTICIPANTS_FETCH_FAIL: \"PARTICIPANTS_FETCH_FAIL\",\n\n  PARTICIPANT_SAVING: \"PARTICIPANT_SAVING\",\n  PARTICIPANT_SAVE_SUCCESS: \"PARTICIPANT_SAVE_SUCCESS\",\n  PARTICIPANT_SAVE_FAIL: \"PARTICIPANT_SAVE_FAIL\",\n  PARTICIPANT_SAVE_VALIDATION_ERROR: \"PARTICIPANT_SAVE_VALIDATION_ERROR\",\n\n  PARTICIPANTS_SORT: \"PARTICIPANTS_SORT\",\n\n  PARTICIPANT_DELETING: \"PARTICIPANT_DELETING\",\n  PARTICIPANT_DELETE_SUCCESS: \"PARTICIPANT_DELETE_SUCCESS\",\n  PARTICIPANT_DELETE_FAIL: \"PARTICIPANT_DELETE_FAIL\",\n\n  PARTICIPANT_UPDATE_SAVING: \"PARTICIPANT_UPDATE_SAVING\",\n  PARTICIPANT_UPDATE_SUCCESS: \"PARTICIPANT_UPDATE_SUCCESS\",\n  PARTICIPANT_UPDATE_FAIL: \"PARTICIPANT_UPDATE_FAIL\",\n  PARTICIPANT_UPDATE_VALIDATION_ERROR: \"PARTICIPANT_UPDATE_VALIDATION_ERROR\",\n\n  PARTICIPANT_ERROR_EMPTY: \"PARTICIPANT_ERROR_EMPTY\",\n\n}","export default class Participant {\n\n  id = null;\n  name = \"\";\n  email = \"\";\n  phone = \"\";\n\n  constructor(id, name, email, phone) {\n    this.id = id;\n    this.name = name;\n    this.email = email;\n    this.phone = phone;\n  }\n\n}","// Most common Finnish names according to http://verkkopalvelu.vrk.fi/Nimipalvelu/\n\nconst CommonFinnishNames = {\n  firstnames: [\n    \"Juhani\",\n    \"Maria\",\n    \"Johannes\",\n    \"Helena\",\n    \"Olavi\",\n    \"Johanna\",\n    \"Antero\",\n    \"Anneli\",\n    \"Tapani\",\n    \"Kaarina\",\n    \"Kalevi\",\n    \"Marjatta\",\n    \"Tapio\",\n    \"Anna\",\n    \"Matti\",\n    \"Liisa\",\n    \"Mikael\",\n    \"Annikki\",\n    \"Ilmari\",\n    \"Sofia\",\n  ],\n  lastnames: [\n    \"Korhonen\",\n    \"Virtanen\",\n    \"Mäkinen\",\n    \"Nieminen\",\n    \"Mäkelä\",\n    \"Hämäläinen\",\n    \"Laine\",\n    \"Heikkinen\",\n    \"Koskinen\",\n    \"Järvinen\",\n  ]\n}\n\nexport default CommonFinnishNames;","\nconst emailDomains = [\n  \"gmail.com\",\n  \"outlook.com\",\n  \"hollywood.com\",\n  \"elisanet.fi\",\n  \"yahoo.com\",\n  \"hotmail.com\",\n  \"aol.com\",\n  \"msn.org\",\n  \"verizon.net\",\n  \"luukku.com\",\n  \"yritys.fi\",\n  \"roskaposti.fi\"\n];\n\nexport default emailDomains;\n","import Participant from \"../dto/Participant\";\nimport CommonFinnishNames from \"../resources/CommonFinnishNames\";\nimport emailDomains from \"../resources/EmailDomains\";\n\n/**\n * simulates backend and database stuff\n *\n * @class Utils\n */\nclass Utils {\n\n  constructor() {\n    this.lastId = 0;\n    this.participants = [];\n    this.storedFilter = null;\n  }\n\n  getParticipants(filter) {\n    if (this.participants.length === 0) {\n      this.generateParticipants(20);\n    }\n\n    if (filter) {\n      this.filterParticipants(filter);\n    }\n\n    return { participants: this.participants };\n  }\n\n  filterParticipants(filter) {\n    if (filter.sortByColumn) {\n\n      const compare = (a, b, attr) => {\n        if (a[attr] < b[attr]) {\n          return -1;\n        }\n        if (a[attr] > b[attr]) {\n          return 1;\n        }\n        return 0;\n      }\n\n      const compareOpposite = (a, b, attr) => {\n        if (a[attr] < b[attr]) {\n          return 1;\n        }\n        if (a[attr] > b[attr]) {\n          return -1;\n        }\n        return 0;\n      }\n\n      if (filter.sortAscending) {\n        this.participants.sort((a, b) => compare(a, b, filter.sortByColumn));\n      } else {\n        this.participants.sort((a, b) => compareOpposite(a, b, filter.sortByColumn));\n      }\n      this.storedFilter = filter;\n    }\n  }\n\n  /**\n   * Generates n amount of Participant-objects with random data.\n   * @param {number} amount number of participants to generate\n   * @returns list of Participant objects.\n   */\n  generateParticipants(amount) {\n    if (!amount || amount < 1) {\n      throw Error(\"no valid amount!\");\n    }\n    this.participants = [];\n\n    for (let i = 0; i < amount; i++) {\n      const id = this.generateId();\n      const name = this.generateName();\n      const email = this.generateEmail(name);\n      const phone = this.generatePhone();\n\n      const participant = new Participant(id, name, email, phone);\n      this.participants.push(participant);\n    }\n\n  }\n\n  generateId() {\n    // simple rising number\n    this.lastId += 1;\n    return this.lastId;\n  }\n\n  generateName() {\n    // example: \"Antero Mäkinen\"\n    const firstname = CommonFinnishNames.firstnames[Math.floor((Math.random() * CommonFinnishNames.firstnames.length))];\n    const lastname = CommonFinnishNames.lastnames[Math.floor((Math.random() * CommonFinnishNames.lastnames.length))];\n    return firstname + \" \" + lastname;\n  }\n\n  generateEmail(name) {\n    // example: \"antero.makinen@mail.com\"\n    let email = name.toLowerCase()\n      .replace(new RegExp(\" \", 'g'), \".\")\n      .replace(new RegExp(\"å\", 'g'), \"a\")\n      .replace(new RegExp(\"ä\", 'g'), \"a\")\n      .replace(new RegExp(\"ö\", 'g'), \"o\")\n      + Math.floor(Math.random() * 99)\n      + \"@\"\n      + emailDomains[Math.floor(Math.random() * emailDomains.length)];\n\n    return email;\n  }\n\n  generatePhone() {\n    // example: \"012 345 6789\"\n    let phone = \"0\";\n    for (let i = 1; i < 12; i++) {\n      if (i === 3 || i === 7) {\n        phone += \" \";\n      } else {\n        phone += Math.floor(Math.random() * 9) + 1;\n      }\n    }\n    return phone;\n  }\n\n  upperCaseName(name) {\n    name = name[0].toUpperCase() + name.substring(1, name.length); // firstname\n    name = name.substring(0, name.indexOf(\" \") + 1) + name[name.indexOf(\" \") + 1].toUpperCase() + name.substring(name.indexOf(\" \") + 2, name.length); // lastname\n    return name;\n  }\n\n  addNewParticipant(participant) {\n    if (participant.id) { throw Error(\"Not a new participant!\") }\n    participant.id = this.generateId();\n    participant.name = this.upperCaseName(participant.name);\n    this.participants.push(participant);\n    if (this.storedFilter) {\n      this.filterParticipants(this.storedFilter);\n    }\n    return { participants: this.participants };\n  }\n\n  deleteParticipant(participantId) {\n    const index = this.participants.findIndex(p => p.id === participantId);\n    if (index !== -1) {\n      this.participants.splice(index, 1);\n      return { participants: this.participants };\n    }\n    return { error: \"no_such_id\" };\n  }\n\n  updateParticipant(participant) {\n    this.participants.map((p) => {\n      if (p.id === participant.id) {\n        p.name = participant.name;\n        p.email = participant.email;\n        p.phone = participant.phone;\n      }\n      return p;\n    });\n    return { participants: this.participants };\n  }\n\n}\n\nexport default Utils;","/**\n * Handles validations.\n * \n * Could be replaced probably with some node module.\n *\n * @class Validator\n * \n * @method validateFields\n * @method validate\n * \n * @method validateName\n * @method validateEmail\n * @method validatePhone\n * \n */\nclass Validator {\n\n  /**\n   * Validates array of fields/form as array\n   * type is type of InputValidationType\n   * @param {*} fields [ {value: \"foo\", type: \"bar\" }, ...]\n   * \n   * @returns errors array: [{key: ..., text: 'lorem ipsum'}, ...]\n   */\n  validateFields(fields) {\n    let errors = [];\n    fields.forEach(field => {\n      const validation = this.validate(field.value, field.type);\n      if (validation.error) {\n        errors.push(validation.error);\n      }\n    });\n    return errors;\n  }\n\n  /**\n   * validates one value of type x.\n   * @param {*} value value to check to match validation\n   * @param {*} type type of InputValidationType\n   */\n  validate(value, type) {\n    switch (type) {\n      case InputValidationType.NAME:\n        return this.validateName(value);\n      case InputValidationType.EMAIL:\n        return this.validateEmail(value);\n      case InputValidationType.PHONE:\n        return this.validatePhone(value);\n      default:\n        return { error: { key: ERROR.UNHANDLED_ERROR, text: \"unhandled InputValidationType!\" } };\n    }\n  }\n\n  validateName(value) {\n    // simplyfied version.\n    // should really use better matcher for unicode characters from other languages.\n    // do we want to have space in between? do we want to allow multiple words than 2?\n    if (value.match(/^[A-ö]+\\s[A-ö]+$/)) {\n      return { success: true };\n    }\n    return { error: { key: ERROR.INVALID_NAME, text: \"Invalid name, please give firstname and lastname separated with space.\" } }\n  }\n\n  validateEmail(value) {\n    // simplified email regexp, \n    // we could use example from https://emailregex.com/ too:\n    // /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    if (value.match(/^\\w+\\.*\\w*@\\w+\\.\\w+\\.?\\w+$/)) {\n      return { success: true };\n    }\n    return { error: { key: ERROR.INVALID_EMAIL, text: \"Invalid email address.\" } }\n  }\n\n  validatePhone(value) {\n    // validates to contain only numbers\n    // removes spaces when checking for only numbers\n    if (value.toString().split(' ').join('').match(/^\\d{3,16}$/)) {\n      return { success: true };\n    }\n    return { error: { key: ERROR.INVALID_PHONE, text: \"Invalid phone number. Only add numbers and spaces.\" } }\n  }\n\n}\n\nconst InputValidationType = {\n  NAME: \"NAME\",\n  EMAIL: \"EMAIL\",\n  PHONE: \"PHONE\"\n}\n\nconst ERROR = {\n  UNHANDLED_ERROR: \"UNHANDLED_ERROR\",\n  INVALID_NAME: \"INVALID_NAME\",\n  INVALID_EMAIL: \"INVALID_EMAIL\",\n  INVALID_PHONE: \"INVALID_PHONE\",\n}\n\n\nexport { Validator, InputValidationType };","import { ActionTypes } from './types';\n\nimport ParticipantService from '../services/ParticipantService';\nimport Participant from '../dto/Participant';\n\nconst participantService = new ParticipantService();\n\nexport const participantFormUpdate = ({ prop, value }) => {\n  return {\n    type: ActionTypes.PARTICIPANT_FORM_UPDATE,\n    payload: { prop, value }\n  };\n};\n\n\nexport const fetchParticipants = ({ filter }) => {\n  return (dispatch) => {\n    dispatch({ type: ActionTypes.PARTICIPANTS_FETCHING });\n    participantService.fetchParticipants(filter, (response) => {\n      if (response.participants) {\n        dispatch({ type: ActionTypes.PARTICIPANTS_FETCH_SUCCESS, payload: response.participants });\n      } else {\n        dispatch({ type: ActionTypes.PARTICIPANTS_FETCH_FAIL, payload: response.errors });\n      }\n    });\n  };\n};\n\n\nexport const addNewParticipant = ({ name, email, phone }) => {\n  return (dispatch) => {\n    dispatch({ type: ActionTypes.PARTICIPANT_SAVING });\n    participantService.addNewParticipant(new Participant(null, name, email, phone), (response) => {\n      if (!response.error && response.participants) {\n        dispatch({ type: ActionTypes.PARTICIPANT_SAVE_SUCCESS, payload: response.participants });\n      } else {\n        dispatch({ type: ActionTypes.PARTICIPANT_SAVE_FAIL, payload: response.error });\n      }\n    }, (errors) => {\n      dispatch({ type: ActionTypes.PARTICIPANT_SAVE_VALIDATION_ERROR, payload: errors });\n    });\n  }\n};\n\nexport const deleteParticipant = ({ participantId }) => {\n  return (dispatch) => {\n    dispatch({ type: ActionTypes.PARTICIPANT_DELETING });\n    participantService.deleteParticipant(participantId, (response) => {\n      if (response.participants) {\n        dispatch({ type: ActionTypes.PARTICIPANT_DELETE_SUCCESS, payload: response.participants });\n      } else if (response.error) {\n        dispatch({ type: ActionTypes.PARTICIPANT_DELETE_FAIL, payload: response.error });\n      }\n    });\n  }\n}\n\nexport const updateParticipant = ({ participant }) => {\n  return (dispatch) => {\n    dispatch({ type: ActionTypes.PARTICIPANT_UPDATE_SAVING, payload: participant });\n\n    setTimeout(() => { // timeout because mapStateToProps() won't get called otherwise and next dispatch will override it.\n      participantService.updateParticipant(participant, (response) => {\n        if (response.participants) {\n          dispatch({ type: ActionTypes.PARTICIPANT_UPDATE_SUCCESS, payload: response.participants });\n        } else if (response.error) {\n          dispatch({ type: ActionTypes.PARTICIPANT_UPDATE_FAIL, payload: response.error });\n        }\n      }, (errors) => {\n        dispatch({ type: ActionTypes.PARTICIPANT_UPDATE_VALIDATION_ERROR, payload: errors });\n      });\n    }, 100)\n\n  }\n}\n\nexport const participantEmptyErrors = () => {\n  return { type: ActionTypes.PARTICIPANT_ERROR_EMPTY };\n}","import Utils from './Utils';\nimport { Validator, InputValidationType } from './Validator';\n\n/**\n * Service for handling participants with backend.\n * @method getParticipantList\n * @method generateParticipants\n * @method addNewParticipant\n * @method deleteParticipant\n * @method updateParticipant\n */\nclass ParticipantService {\n\n  constructor() {\n    this.utils = new Utils();\n    this.validator = new Validator();\n  }\n  /**\n   * Fetches participants\n   * @returns callback with list of Participant-objects.\n   */\n  fetchParticipants(filter, callback) {\n    callback(this.utils.getParticipants(filter));\n  }\n\n  getFormFields(participant) {\n    participant.name = participant.name.trim();\n    participant.email = participant.email.trim();\n    participant.phone = participant.phone.trim();\n    const fields = [\n      { value: participant.name, type: InputValidationType.NAME },\n      { value: participant.email, type: InputValidationType.EMAIL },\n      { value: participant.phone, type: InputValidationType.PHONE }\n    ];\n    return fields;\n  }\n\n  /**\n   * Adds new participant to the database\n   * Validates before saving\n   * @param {*} participant type of Participant class.\n   * @param {*} callback return \"success\" -string on successful entry.\n   * @param {*} validationError returns array of validation errors.\n   */\n  addNewParticipant(participant, callback, validationError) {\n    const fields = this.getFormFields(participant);\n    const errors = this.validator.validateFields(fields);\n    if (errors.length > 0) {\n      validationError(errors);\n    } else {\n      callback(this.utils.addNewParticipant(participant));\n    }\n  }\n\n  deleteParticipant(participantId, callback) {\n    callback(this.utils.deleteParticipant(participantId));\n  }\n\n  updateParticipant(participant, callback, validationError) {\n    const fields = this.getFormFields(participant);\n    const errors = this.validator.validateFields(fields);\n    if (errors.length > 0) {\n      validationError(errors);\n    } else {\n      callback(this.utils.updateParticipant(participant));\n    }\n  }\n\n}\n\nexport default ParticipantService;\n","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { Edit, Delete, ArrowDownward, ArrowUpward } from '@material-ui/icons';\n\nimport { fetchParticipants, deleteParticipant, updateParticipant, participantEmptyErrors } from '../actions';\nimport Participant from '../dto/Participant';\n\nclass ParticipantList extends React.Component {\n\n  filter = { sortAscending: true, sortByColumn: \"\" };\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.fetchParticipants({ filter: this.filter });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.editParticipant != null && this.props.editParticipant === null) {\n      this.setState({ editParticipant: null });\n    }\n  }\n\n  addHeaderSortStyling(sort) {\n    return this.sortBy === sort ? ' list-header-sortby' : '';\n  }\n\n  renderHeader() {\n    return (\n      <div className=\"list-header\">\n        <div className={'list-header-item flex-width-2' + this.addHeaderSortStyling(\"name\")} onClick={() => this.sortByColumn(\"name\")}>\n          Name {this.renderSortIcon(\"name\")}\n        </div>\n        <div className={'list-header-item flex-width-3' + this.addHeaderSortStyling(\"email\")} onClick={() => this.sortByColumn(\"email\")}>\n          E-mail address {this.renderSortIcon(\"email\")}\n        </div>\n        <div className={'list-header-item flex-width-2' + this.addHeaderSortStyling(\"phone\")} onClick={() => this.sortByColumn(\"phone\")}>\n          Phone number {this.renderSortIcon(\"phone\")}\n        </div>\n        <div className=\"list-header-item flex-width-2\">\n        </div>\n      </div>\n    );\n  }\n\n  renderSortIcon(dataValue) {\n    if (this.filter.sortByColumn === dataValue) {\n      if (this.filter.sortAscending) {\n        return <div className=\"icon-container\"><ArrowUpward className=\"icon\" /></div>\n      }\n      return <div className=\"icon-container\"><ArrowDownward className=\"icon\" /></div>\n    }\n  }\n\n  sortByColumn(dataValue) {\n    if (dataValue === this.filter.sortByColumn) {\n      this.filter.sortAscending = !this.filter.sortAscending;\n    } else {\n      this.filter.sortAscending = true;\n    }\n    this.filter = { ...this.filter, sortByColumn: dataValue, };\n    this.props.fetchParticipants({ filter: this.filter });\n  }\n\n  editRow(participantId) {\n    const { editParticipant } = this.state;\n    this.props.participants.forEach((p) => {\n      if (p.id === participantId) {\n        if (editParticipant && editParticipant.id === p.id) {\n          this.setState({ editParticipant: null });\n        } else {\n          this.setState({ editParticipant: new Participant(p.id, p.name, p.email, p.phone) });\n        }\n      }\n    });\n  }\n\n  deleteParticipant(participantId) {\n    this.props.deleteParticipant({ participantId });\n  }\n\n  handleInputChange(property, newValue) {\n    const { editParticipant } = this.state;\n    editParticipant[property] = newValue;\n    this.setState({ editParticipant });\n  }\n\n  renderItemContent(participant, property, inputType, placeholder) {\n    const { editParticipant } = this.state;\n    if (editParticipant && participant.id === editParticipant.id) {\n      return (\n        <input\n          name={property}\n          type={inputType}\n          value={editParticipant[property]}\n          placeholder={placeholder}\n          onChange={(newValue) => this.handleInputChange(property, newValue.target.value)} />\n      );\n    }\n    return (\n      <span>{participant[property]}</span>\n    )\n  }\n\n  cancelEdit() {\n    this.setState({ editParticipant: null });\n    this.props.participantEmptyErrors();\n  }\n\n  updateParticipant(participant) {\n    if (participant.id === this.state.editParticipant.id) {\n      this.props.updateParticipant({ participant: this.state.editParticipant });\n    } else {\n      console.error(\"wrong id: \" + participant.id + \" is not \" + this.state.editParticipant.id);\n    }\n  }\n\n  renderRowOptions(participant) {\n    const { editParticipant } = this.state;\n    if (editParticipant && participant.id === editParticipant.id) {\n      return (\n        <div className=\"buttons\">\n          <button className=\"button-blue-text button-cancel\" onClick={() => this.cancelEdit()}>Cancel</button>\n          <button className=\"button-blue button-save\" onClick={() => this.updateParticipant(participant)}>Save</button>\n        </div>\n      );\n    }\n    return (\n      <span>\n        <Edit className=\"edit\" onClick={() => this.editRow(participant.id)} />\n        <Delete className=\"delete\" onClick={() => this.deleteParticipant(participant.id)} />\n      </span>\n    );\n  }\n\n  renderItems() {\n    return (\n      <div className=\"list-items\">\n        {\n          this.props.participants.map((p) => {\n            return (\n              <div key={p.id} className=\"list-item\">\n                <div className=\"list-item-property flex-width-2\">\n                  {this.renderItemContent(p, 'name', 'text', 'Full name')}\n                </div>\n                <div className=\"list-item-property flex-width-3\">\n                  {this.renderItemContent(p, 'email', 'email', 'E-mail address')}\n                </div>\n                <div className=\"list-item-property flex-width-2\">\n                  {this.renderItemContent(p, 'phone', 'tel', 'Phone number')}\n                </div>\n                <div className=\"list-item-property flex-width-2 right no-padding\" >\n                  {this.renderRowOptions(p)}\n                </div>\n              </div>\n            );\n          })\n        }\n      </div>\n    );\n  }\n\n  renderList() {\n    if (this.props.participants) {\n      return (\n        <div className=\"list\">\n          {this.renderHeader()}\n          {this.renderItems()}\n        </div>\n      );\n    } else if (this.props.loading) {\n      return (\n        <span>Loading participants...</span>\n      );\n    } else {\n      return <span>Error loading content. Try again later.</span>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"participants-view\">\n        {this.renderList()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  // console.log(\"ParticipantList.mapStateToProps, state\", state);\n  if (state.participantReducer) {\n    return state.participantReducer;\n  }\n  return {};\n};\n\nexport default connect(mapStateToProps, { fetchParticipants, deleteParticipant, updateParticipant, participantEmptyErrors })(ParticipantList);","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { addNewParticipant, participantFormUpdate } from '../actions';\n\nclass ParticipantForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.addParticipant = this.addParticipant.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  addParticipant(event) {\n    event.preventDefault();\n    const { name, email, phone } = this.props.form;\n    this.props.addNewParticipant({ name, email, phone });\n  }\n\n  handleInputChange(event) {\n    const value = event.target.value;\n    const prop = event.target.name;\n    this.props.participantFormUpdate({ prop, value }) // TODO: handle locally with state.\n  }\n\n  render() {\n    const { name, email, phone } = this.props.form;\n\n    return (\n      <form onSubmit={this.addParticipant} className=\"participants-form\">\n        <div className=\"form-item flex-width-2\">\n          <input value={name} type=\"text\" name=\"name\" placeholder=\"Full name\" onChange={this.handleInputChange} />\n        </div>\n        <div className=\"form-item flex-width-3\">\n          <input value={email} type=\"email\" name=\"email\" placeholder=\"E-mail address\" onChange={this.handleInputChange} />\n        </div>\n        <div className=\"form-item flex-width-2\">\n          <input value={phone} type=\"tel\" name=\"phone\" placeholder=\"Phone number\" onChange={this.handleInputChange} />\n        </div>\n        <div className=\"form-item flex-width-1\">\n        </div>\n        <div className=\"form-item flex-width-1 no-padding\">\n          <button onClick={this.addParticipant}>Add new</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  if (state.participantReducer.form) {\n    return { form: state.participantReducer.form };\n  }\n  return {};\n};\n\nexport default connect(mapStateToProps, { addNewParticipant, participantFormUpdate })(ParticipantForm);","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport Header from './common/Header';\nimport ParticipantList from './ParticipantList';\nimport ParticipantForm from './ParticipantForm';\n\nimport \"../styles/styles.scss\";\n\n/**\n * renders page content\n */\nclass ViewComponent extends React.Component {\n\n  renderErrors() {\n    if (this.props.errors && this.props.errors.length > 0) {\n      return (\n        <div className=\"errors\">\n          {\n            this.props.errors.map((error) => {\n              return (\n                <div key={error.key} className=\"error\">\n                  {error.text}\n                </div>\n              );\n            })\n          }\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"view-container\">\n        <Header text={\"Nord Software\"} />\n        <div className=\"page-content\">\n          <h2 className=\"title\">List of participants</h2>\n          {this.renderErrors()}\n          <ParticipantForm />\n          <ParticipantList />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nconst mapStateToProps = state => {\n  if (state.participantReducer.errors) {\n    const { errors } = state.participantReducer;\n    errors.map(\n      index => ({ ...state.participantReducer[index], index })\n    );\n    return { errors };\n  }\n\n  return {};\n};\n\nexport default connect(mapStateToProps, {})(ViewComponent);","import { ActionTypes } from '../actions/types';\n\nconst INITIAL_STATE = {\n  participants: [],\n  form: { name: '', email: '', phone: '' },\n  loading: false,\n  errors: [],\n  editParticipant: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  // console.log(\"action.type:\", action.type, \"\\naction.payload:\", action.payload);\n  switch (action.type) {\n\n    case ActionTypes.PARTICIPANTS_FETCH_SUCCESS:\n    case ActionTypes.PARTICIPANTS_SORT:\n    case ActionTypes.PARTICIPANT_DELETE_SUCCESS:\n      return { ...state, loading: false, errors: [], participants: action.payload };\n\n    case ActionTypes.PARTICIPANT_SAVE_SUCCESS:\n    case ActionTypes.PARTICIPANT_UPDATE_SUCCESS:\n      return { ...state, loading: false, errors: [], form: INITIAL_STATE.form, participants: action.payload, editParticipant: null };\n\n    case ActionTypes.PARTICIPANT_SAVING:\n    case ActionTypes.PARTICIPANTS_FETCHING:\n    case ActionTypes.PARTICIPANT_DELETING:\n      return { ...state, loading: true, errors: [] };\n\n    case ActionTypes.PARTICIPANT_UPDATE_SAVING:\n      return { ...state, loading: true, errors: [], editParticipant: action.payload };\n\n    case ActionTypes.PARTICIPANT_SAVE_FAIL:\n      return { ...state, loading: false, form: INITIAL_STATE.form, errors: action.payload };\n\n    case ActionTypes.PARTICIPANT_SAVE_VALIDATION_ERROR:\n    case ActionTypes.PARTICIPANT_UPDATE_VALIDATION_ERROR:\n      return { ...state, loading: false, errors: action.payload };\n\n    case ActionTypes.PARTICIPANT_FORM_UPDATE:\n      // action.payload === { prop: 'name', value: 'jane' } \n      return { ...state, form: { ...state.form, [action.payload.prop]: action.payload.value } };\n\n    case ActionTypes.PARTICIPANT_DELETE_FAIL:\n    case ActionTypes.PARTICIPANT_UPDATE_FAIL:\n      return { ...state, loading: false, errors: [action.payload] };\n\n    case ActionTypes.PARTICIPANT_ERROR_EMPTY:\n      return { ...state, errors: INITIAL_STATE.errors };\n\n    default:\n      // console.log(\"unhandled action.type: \", action.type);\n      return state;\n  }\n};","import { combineReducers } from 'redux';\nimport ParticipantReducer from './ParticipantReducer';\n\nexport default combineReducers({\n  participantReducer: ParticipantReducer\n});\n","import React from 'react';\n\nimport ViewComponent from \"./components/ViewComponent\";\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers';\n\nimport \"./styles/styles.scss\";\n\nfunction App() {\n  const store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\n  return (\n    <Provider className=\"App\" store={store}>\n      <ViewComponent></ViewComponent>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}